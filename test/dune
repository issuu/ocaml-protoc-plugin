
;; Determine if the compiler supports the --experimental_allow_proto3_optional flag.
;; The output file will be non-empty if the flag is supported
(subdir config
 (rule
 (target support_proto3_optional.conf)
 (action (with-accepted-exit-codes (or 0 1) (ignore-stderr (with-stdout-to %{target} (run protoc --experimental_allow_proto3_optional --version)))))))

(rule
 (enabled_if (<> %{read:config/support_proto3_optional.conf} ""))
 (action (copy proto3_optional_test_opt.ml proto3_optional_test.ml)))

;; Create an empty test file if proto3 optional fields is not supported by the system's protoc compiler
(rule
 (target proto3_optional_test.ml)
 (enabled_if (= %{read:config/support_proto3_optional.conf} ""))
 (action (with-stdout-to %{target} (echo ""))))


;; exclude proto3_optional_test.ml based on the support
(library
 (name test)
 (enabled_if (and (<> %{architecture} x86_32) (<> %{architecture} arm32)))
 (libraries ocaml_protoc_plugin google_types)
 (inline_tests)
 (modules :standard \ proto3_optional_test_opt)
 (preprocess
  (pps ppx_expect ppx_deriving.show ppx_deriving.eq)))


(rule
 (target google_include)
 (action (with-stdout-to %{target}
          (system "pkg-config protobuf --variable=includedir"))))

(rule
 (targets
   basic.ml primitive_types.ml int_types.ml repeated.ml enum.ml
   message.ml oneof.ml map.ml package.ml include.ml included.ml
   included2.ml service.ml recursive.ml protocol.ml name_clash.ml
   name_clash_mangle.ml proto2.ml packed.ml mangle_names.ml extensions.ml
   options.ml name_clash2.ml empty.ml service_rpc_clash.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto
    basic.proto primitive_types.proto int_types.proto repeated.proto
    enum.proto message.proto oneof.proto map.proto package.proto
    include.proto included.proto included2.proto service.proto
    recursive.proto protocol.proto name_clash.proto name_clash_mangle.proto
    proto2.proto packed.proto mangle_names.proto extensions.proto options.proto
    name_clash2.proto empty.proto service_rpc_clash.proto)
 )
 (action
  (run protoc -I %{read-lines:google_include} -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=open=Google_types;annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets int_types_native.ml int_types_native_proto2.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto int_types_native.proto int_types_native_proto2.proto))
 (action
  (run protoc -I %{read-lines:google_include} -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=open=Google_types;int32_as_int=false;int64_as_int=false;annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (targets singleton_record.ml oneof2.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto singleton_record.proto oneof2.proto))
 (action
  (run protoc -I %{read-lines:google_include} -I .
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=open=Google_types;annot=[@@deriving show { with_path = false }, eq]:." %{proto})))

(rule
 (enabled_if (<> %{read:config/support_proto3_optional.conf} ""))
 (target proto3_optional.ml)
 (deps
  (:plugin ../src/plugin/protoc_gen_ocaml.exe)
  (:proto proto3_optional.proto)
 )
 (action
  (run protoc -I %{read-lines:google_include} -I .
       "--experimental_allow_proto3_optional"
       "--plugin=protoc-gen-ocaml=%{plugin}"
       "--ocaml_out=open=Google_types;annot=[@@deriving show { with_path = false }, eq]:." %{proto})))
